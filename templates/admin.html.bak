<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - Government Feedback System</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .sentiment-positive { color: #059669; }
        .sentiment-negative { color: #dc2626; }
        .sentiment-neutral { color: #6b7280; }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <nav class="bg-blue-600 text-white shadow-lg">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <i class="fas fa-shield-alt text-2xl mr-2"></i>
                    <span class="text-xl font-bold">Admin Panel</span>
                </div>
                <div class="flex items-center space-x-4">
                    <button onclick="window.location.href='/'" class="hover:text-gray-200">
                        <i class="fas fa-home mr-1"></i> Home
                    </button>
                    <button onclick="logout()" class="hover:text-gray-200">
                        <i class="fas fa-sign-out-alt mr-1"></i> Logout
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-6 py-8">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Officials Management -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-bold mb-4 flex items-center">
                    <i class="fas fa-user-tie mr-2 text-blue-600"></i>
                    Officials Management
                </h2>
                <div class="space-y-4">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold">Add New Official</h3>
                        <button onclick="toggleForm('officialForm')" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                            <i class="fas fa-plus mr-1"></i> Add
                        </button>
                    </div>
                    <form id="officialForm" class="hidden space-y-4 border-t pt-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Name</label>
                            <input type="text" id="officialName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Position</label>
                            <input type="text" id="officialPosition" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Photo URL</label>
                            <input type="text" id="officialPhoto" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                        <button type="submit" class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                            Save Official
                        </button>
                    </form>
                    <div class="mt-4">
                        <h3 class="text-lg font-semibold mb-2">Current Officials</h3>
                        <div id="officialsList" class="space-y-2">
                            <!-- Officials will be listed here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Users Management -->
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-bold mb-4 flex items-center">
                    <i class="fas fa-users mr-2 text-blue-600"></i>
                    Users Management
                </h2>
                <div class="space-y-4">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold">Add New User</h3>
                        <button onclick="toggleForm('userForm')" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                            <i class="fas fa-plus mr-1"></i> Add
                        </button>
                    </div>
                    <form id="userForm" class="hidden space-y-4 border-t pt-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Name</label>
                            <input type="text" id="userName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Aadhar ID</label>
                            <input type="text" id="userAadhar" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Password</label>
                            <input type="password" id="userPassword" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                        <button type="submit" class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                            Save User
                        </button>
                    </form>
                    <div class="mt-4">
                        <h3 class="text-lg font-semibold mb-2">Current Users</h3>
                        <div id="usersList" class="space-y-2">
                            <!-- Users will be listed here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Feedback Management -->
            <div class="bg-white rounded-lg shadow-lg p-6 md:col-span-2">
                <h2 class="text-xl font-bold mb-4 flex items-center">
                    <i class="fas fa-comments mr-2 text-blue-600"></i>
                    Feedback Management
                </h2>
                <div class="space-y-4">
                    <div class="flex items-center space-x-4 mb-4">
                        <select id="officialFilter" class="rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">All Officials</option>
                        </select>
                        <button onclick="loadFeedbacks()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                            <i class="fas fa-filter mr-1"></i> Filter
                        </button>
                    </div>
                    
                    <!-- Sentiment Analysis Section -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div class="bg-gray-50 rounded-lg p-4">
                            <h3 class="text-lg font-semibold mb-4">Sentiment Distribution</h3>
                            <canvas id="sentimentChart"></canvas>
                        </div>
                        <div class="bg-gray-50 rounded-lg p-4">
                            <h3 class="text-lg font-semibold mb-4">Sentiment Summary</h3>
                            <div class="space-y-4" id="sentimentSummary">
                                <!-- Sentiment summary will be populated here -->
                            </div>
                        </div>
                        <div class="bg-gray-50 rounded-lg p-4 md:col-span-2">
                            <h3 class="text-lg font-semibold mb-4">Sentiment by Category</h3>
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead>
                                        <tr>
                                            <th class="px-6 py-3 bg-gray-100 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                            <th class="px-6 py-3 bg-gray-100 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Count</th>
                                            <th class="px-6 py-3 bg-gray-100 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Average Sentiment</th>
                                        </tr>
                                    </thead>
                                    <tbody id="categoryTable" class="bg-white divide-y divide-gray-200">
                                        <!-- Category data will be populated here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    
                    <div id="feedbackList" class="space-y-4">
                        <!-- Feedbacks will be listed here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded shadow-lg transform transition-transform duration-300 translate-x-full">
        <span id="toastMessage"></span>
    </div>

    <script>
        // Show/hide forms
        function toggleForm(formId) {
            const form = document.getElementById(formId);
            form.classList.toggle('hidden');
        }

        // Show toast notification
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            toast.className = `fixed top-4 right-4 px-6 py-3 rounded shadow-lg transform transition-transform duration-300 ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            } text-white`;
            
            toastMessage.textContent = message;
            toast.style.transform = 'translateX(0)';
            
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
            }, 3000);
        }

        // Edit official functions
        function editOfficial(official) {
            console.log('Editing official:', official);
            const modal = document.getElementById('editOfficialModal');
            document.getElementById('editOfficialId').value = official.id;
            document.getElementById('editOfficialName').value = official.name;
            document.getElementById('editOfficialPosition').value = official.position;
            document.getElementById('editOfficialPhotoUrl').value = official.photo_url || '';
            modal.classList.remove('hidden');
        }

        function closeEditOfficialModal() {
            document.getElementById('editOfficialModal').classList.add('hidden');
        }

        async function updateOfficial(event) {
            event.preventDefault();
            const id = document.getElementById('editOfficialId').value;
            
            try {
                console.log('Updating official:', id);
                const formData = {
                    name: document.getElementById('editOfficialName').value,
                    position: document.getElementById('editOfficialPosition').value,
                    photo_url: document.getElementById('editOfficialPhotoUrl').value
                };
                console.log('Official data:', formData);
                
                const response = await fetch(`/api/admin/officials/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('Official updated:', data);
                
                if (data.error) {
                    throw new Error(data.error);
                }
                
                // Close modal and show success message
                closeEditOfficialModal();
                showToast('Official updated successfully');
                
                // Reload officials list
                await loadOfficials();
            } catch (error) {
                console.error('Error updating official:', error);
                showToast('Error updating official: ' + error.message, 'error');
            }
        }

        // Load officials
        async function loadOfficials() {
            try {
                const response = await fetch('/api/admin/officials');
                const officials = await response.json();
                
                const officialsList = document.getElementById('officialsList');
                officialsList.innerHTML = '';
                
                officials.forEach(official => {
                    const card = document.createElement('div');
                    card.className = 'bg-gray-50 p-4 rounded-lg flex justify-between items-start';
                    
                    const ratingClass = official.rating >= 4 ? 'text-green-600' : 
                                      official.rating >= 3 ? 'text-yellow-600' : 
                                      'text-red-600';
                    
                    card.innerHTML = `
                        <div class="flex-grow">
                            <div class="flex items-center space-x-2">
                                <h4 class="font-semibold">${official.name}</h4>
                                <span class="text-sm text-gray-500">(${official.position})</span>
                            </div>
                            <p class="text-sm text-gray-600">Department: ${official.department || 'N/A'}</p>
                            <p class="text-sm text-gray-600">Location: ${official.office_location || 'N/A'}</p>
                            <p class="text-sm text-gray-600">Email: ${official.contact_email || 'N/A'}</p>
                            <div class="mt-2 flex items-center space-x-4">
                                <span class="${ratingClass} text-sm">
                                    <i class="fas fa-star"></i> ${official.rating ? official.rating.toFixed(1) : 'No ratings'}
                                </span>
                                ${official.is_flagged ? 
                                    '<span class="text-red-500 text-sm"><i class="fas fa-flag"></i> Flagged</span>' : ''}
                                ${official.marked_for_review ? 
                                    '<span class="text-yellow-500 text-sm"><i class="fas fa-exclamation-triangle"></i> Under Review</span>' : ''}
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="editOfficial(${JSON.stringify(official)})" 
                                    class="text-blue-600 hover:text-blue-800">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteOfficial(${official.id})" 
                                    class="text-red-600 hover:text-red-800">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `;
                    
                    officialsList.appendChild(card);
                });
                
                // Update official filter dropdown
                const officialFilter = document.getElementById('officialFilter');
                if (officialFilter) {
                    // Keep the first option (All Officials)
                    officialFilter.innerHTML = '<option value="">All Officials</option>';
                    officials.forEach(official => {
                        const option = document.createElement('option');
                        option.value = official.id;
                        option.textContent = official.name;
                        officialFilter.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Failed to load officials', 'error');
            }
        }

        // Load users
        async function loadUsers() {
            try {
                const response = await fetch('/api/admin/users');
                if (!response.ok) {
                    throw new Error('Failed to load users');
                }
                const users = await response.json();
                
                const usersList = document.getElementById('usersList');
                if (!usersList) {
                    console.error('Users list element not found');
                    return;
                }
                
                usersList.innerHTML = '';
                users.forEach(user => {
                    const userCard = document.createElement('div');
                    userCard.className = 'bg-gray-50 p-4 rounded-lg shadow mb-2';
                    userCard.innerHTML = `
                        <div class="flex items-center justify-between">
                            <div>
                                <h4 class="font-semibold">${user.name}</h4>
                                <p class="text-sm text-gray-600">Aadhar ID: ${user.aadhar_id}</p>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="resetPassword('${user.aadhar_id}')" 
                                        class="bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600"
                                        title="Reset Password">
                                    <i class="fas fa-key"></i>
                                </button>
                                <button onclick="deleteUser('${user.aadhar_id}')" 
                                        class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                                        title="Delete User">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    `;
                    usersList.appendChild(userCard);
                });
            } catch (error) {
                console.error('Error loading users:', error);
                showToast('Error loading users: ' + error.message, 'error');
            }
        }

        // Load feedbacks
        async function loadFeedbacks() {
            try {
                const officialId = document.getElementById('officialFilter').value;
                console.log(`Loading feedbacks for official: ${officialId || 'all'}`);
                
                const response = await fetch(`/api/admin/feedbacks${officialId ? `?official_id=${officialId}` : ''}`);
                console.log('Feedback response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Error response:', errorText);
                    throw new Error(`Server error: ${response.status}. Details: ${errorText}`);
                }
                
                const data = await response.json();
                console.log(`Received ${data.feedbacks ? data.feedbacks.length : 0} feedbacks`);
                
                if (!data.feedbacks || !Array.isArray(data.feedbacks)) {
                    throw new Error('Invalid feedback data received');
                }

                // Clear existing feedbacks before displaying new ones
                const feedbackList = document.getElementById('feedbackList');
                if (feedbackList) {
                    feedbackList.innerHTML = '';
                }

                displayFeedbacks(data.feedbacks);
                
                if (data.sentiment_stats) {
                    updateSentimentAnalysis(data.sentiment_stats, data.feedbacks);
                }
            } catch (error) {
                console.error('Error loading feedbacks:', error);
                showToast('An error occurred while loading feedbacks', 'error');
                
                // Clear the feedback list and sentiment analysis when there's an error
                const feedbackList = document.getElementById('feedbackList');
                if (feedbackList) {
                    feedbackList.innerHTML = '<p class="text-gray-500 text-center py-4">No feedbacks available</p>';
                }
                
                // Reset sentiment analysis
                updateSentimentAnalysis({
                    positive: 0,
                    negative: 0,
                    neutral: 0,
                    total_sentiment: 0,
                    average_sentiment: 0,
                    by_category: {}
                }, []);
            }
        }

        function displayFeedbacks(feedbacks) {
            const feedbackList = document.getElementById('feedbackList');
            if (!feedbackList) {
                console.error('Feedback list element not found');
                return;
            }
            
            if (!feedbacks.length) {
                feedbackList.innerHTML = '<p class="text-gray-500 text-center py-4">No feedbacks available</p>';
                return;
            }
            
            feedbackList.innerHTML = '';
            feedbacks.forEach(feedback => {
                const feedbackCard = document.createElement('div');
                feedbackCard.className = 'bg-gray-50 p-4 rounded-lg shadow mb-4';
                
                // Convert UTC timestamp to local time
                const timestamp = new Date(feedback.timestamp).toLocaleString();
                
                // Generate media HTML if media files exist
                const mediaHtml = feedback.media_files && feedback.media_files.length > 0 ? `
                    <div class="mt-4">
                        <h5 class="text-sm font-semibold text-gray-700 mb-2">Attached Media:</h5>
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            ${feedback.media_files.map(media => {
                                if (media.file_type === 'image') {
                                    return `
                                        <div class="relative group">
                                            <img src="${media.file_path}" alt="Feedback image" 
                                                 class="w-full h-48 object-cover rounded-lg cursor-pointer hover:opacity-90"
                                                 onclick="window.open('${media.file_path}', '_blank')">
                                            <div class="absolute bottom-2 right-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                                                <i class="fas fa-image"></i> Image
                                            </div>
                                        </div>`;
                                } else {
                                    return `
                                        <div class="relative group">
                                            <video src="${media.file_path}" 
                                                   class="w-full h-48 object-cover rounded-lg" 
                                                   controls>
                                                Your browser does not support the video tag.
                                            </video>
                                            <div class="absolute bottom-2 right-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                                                <i class="fas fa-video"></i> Video
                                            </div>
                                        </div>`;
                                }
                            }).join('')}
                        </div>
                    </div>` : '';

                // Add sentiment indicator
                const sentimentClass = feedback.sentiment_score > 0.05 ? 'sentiment-positive' : 
                                     feedback.sentiment_score < -0.05 ? 'sentiment-negative' : 
                                     'sentiment-neutral';
                const sentimentIcon = feedback.sentiment_score > 0.05 ? 'smile' : 
                                    feedback.sentiment_score < -0.05 ? 'frown' : 
                                    'meh';
                const sentimentScore = feedback.sentiment_score !== null ? 
                    `<span class="${sentimentClass}">
                        <i class="fas fa-${sentimentIcon}"></i>
                        ${(feedback.sentiment_score * 100).toFixed(1)}%
                    </span>` : '';
                
                feedbackCard.innerHTML = `
                    <div class="flex items-start justify-between">
                        <div class="flex-grow">
                            <div class="flex items-center space-x-2">
                                <h4 class="font-semibold">${feedback.user.name}</h4>
                                <span class="text-sm text-gray-500">→</span>
                                <span class="font-semibold">${feedback.official.name}</span>
                                <span class="text-sm text-gray-500">(${feedback.official.position})</span>
                            </div>
                            <div class="mt-2 flex items-center space-x-4">
                                <span class="text-sm text-gray-600">${feedback.category}</span>
                                <div class="text-yellow-400">
                                    ${'★'.repeat(feedback.rating)}${'☆'.repeat(5-feedback.rating)}
                                </div>
                                ${sentimentScore}
                            </div>
                            <p class="text-gray-700 mt-2">${feedback.description}</p>
                            <p class="text-xs text-gray-500 mt-2">Submitted: ${timestamp}</p>
                            ${mediaHtml}
                        </div>
                        <button onclick="deleteFeedback(${feedback.id})" 
                                class="text-red-500 hover:text-red-700 ml-4">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                
                feedbackList.appendChild(feedbackCard);
            });
        }

        function updateSentimentAnalysis(stats, feedbacks) {
            // Update sentiment summary
            const summaryHtml = `
                <div class="grid grid-cols-3 gap-4">
                    <div class="text-center">
                        <div class="text-2xl font-bold sentiment-positive">${stats.positive}</div>
                        <div class="text-sm text-gray-600">Positive</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold sentiment-neutral">${stats.neutral}</div>
                        <div class="text-sm text-gray-600">Neutral</div>
                    </div>
                    <div class="text-center">
                        <div class="text-2xl font-bold sentiment-negative">${stats.negative}</div>
                        <div class="text-sm text-gray-600">Negative</div>
                    </div>
                </div>
                <div class="mt-4">
                    <div class="text-sm font-medium text-gray-700">Average Sentiment Score</div>
                    <div class="text-xl font-bold ${stats.average_sentiment > 0 ? 'sentiment-positive' : stats.average_sentiment < 0 ? 'sentiment-negative' : 'sentiment-neutral'}">
                        ${(stats.average_sentiment * 100).toFixed(1)}%
                    </div>
                </div>
                <div class="mt-4">
                    <div class="text-sm font-medium text-gray-700">Total Feedbacks</div>
                    <div class="text-xl font-bold text-gray-900">${feedbacks.length}</div>
                </div>
            `;
            
            document.getElementById('sentimentSummary').innerHTML = summaryHtml;
            
            // Update sentiment chart
            const ctx = document.getElementById('sentimentChart');
            if (!ctx) {
                console.warn('Sentiment chart canvas not found');
                return;
            }

            // Safely destroy existing chart
            if (window.sentimentChart && typeof window.sentimentChart.destroy === 'function') {
                window.sentimentChart.destroy();
            }
            
            try {
                window.sentimentChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Positive', 'Neutral', 'Negative'],
                        datasets: [{
                            data: [stats.positive, stats.neutral, stats.negative],
                            backgroundColor: ['#059669', '#6b7280', '#dc2626'],
                            borderWidth: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error creating sentiment chart:', error);
            }
        }

        // Initialize
        function initializeAdmin() {
            loadOfficials();
            loadUsers();
            loadFeedbacks();
        }

        // Wait for DOM to be ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeAdmin);
        } else {
            initializeAdmin();
        }

        // Form submissions
        async function deleteOfficial(id) {
            if (!confirm('Are you sure you want to delete this official? All associated feedbacks will also be deleted.')) {
                return;
            }
            
            try {
                console.log(`Deleting official: ${id}`);
                const response = await fetch(`/api/admin/officials/${id}`, {
                    method: 'DELETE'
                });
                console.log('Delete response status:', response.status);
                
                const data = await response.json();
                console.log('Delete response:', data);
                
                if (data.success) {
                    showToast('Official deleted successfully');
                    // First load officials to update the dropdown
                    await loadOfficials();
                    // Then reset the filter and load all feedbacks
                    const officialFilter = document.getElementById('officialFilter');
                    if (officialFilter) {
                        officialFilter.value = '';
                    }
                    // Finally load feedbacks
                    await loadFeedbacks();
                } else {
                    showToast(data.error || 'Failed to delete official', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred while deleting the official', 'error');
            }
        }

        async function deleteUser(aadharId) {
            if (!confirm('Are you sure you want to delete this user?')) return;
            
            try {
                const response = await fetch(`/api/admin/users/${aadharId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showToast('User deleted successfully');
                    loadUsers();
                } else {
                    showToast('Error deleting user', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Error deleting user', 'error');
            }
        }

        async function deleteFeedback(id) {
            if (!confirm('Are you sure you want to delete this feedback?')) return;
            
            try {
                const response = await fetch(`/api/admin/feedbacks/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showToast('Feedback deleted successfully');
                    loadFeedbacks();
                } else {
                    showToast('Error deleting feedback', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Error deleting feedback', 'error');
            }
        }

        async function resetPassword(aadharId) {
            const newPassword = prompt('Enter new password:');
            if (!newPassword) return;

            try {
                const response = await fetch(`/api/admin/users/${aadharId}/reset-password`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ password: newPassword })
                });

                if (response.ok) {
                    showToast('Password reset successfully');
                } else {
                    showToast('Error resetting password', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Error resetting password', 'error');
            }
        }

        function logout() {
            fetch('/logout', { method: 'POST' })
                .then(() => window.location.href = '/');
        }
    </script>
</body>
</html>
